name: test workflows
on: [workflow_dispatch]

env:
  image: 'checkmk/check-mk-raw'
  version: '21' #2.1.0pxx
  destination_path: 'check_mk_agent'

jobs:
  extract-build-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout all tags and branches
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: 'develop' # Testing

      - name: fetch latest check_mk agent image
        id: check_version
        run : |
          current_version=$(cat build/version_$version)
          latest_version=$(curl -s https://hub.docker.com/v2/repositories/checkmk/check-mk-raw/tags\?page_size\=1000 | jq -r '.results[].name' | grep -oP "2\.1\.0p\d+" | sort -V | tail -n 1)

          if [[ "$latest_version" > "$current_version" ]]; then
              echo "New version found: $latest_version"
               echo "$latest_version" > build/version_$version
              echo "latest_version=$(echo $latest_version)" >> $GITHUB_ENV
          else
              echo "No new version found."
              echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Check if Pull Request already exists
        if: steps.check_version.outputs.skip != 'true'
        id: check_pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Set the desired pull request name to check
          PULL_REQUEST_NAME="Test"
          
          # Use GitHub CLI to check if a pull request with the specified name exists in the current repository
          RESPONSE=$(gh pr list --repo "$GITHUB_REPOSITORY" --state all --search "$PULL_REQUEST_NAME" --json "number" | jq '.[0].number')
          
          # Check if the response is empty (means the pull request doesn't exist)
          if [ -z "$RESPONSE" ]; then
            echo "The pull request does not exist."
          else
            echo "The pull request already exists."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Extract
        if: steps.check_version.outputs.skip != 'true' && steps.check_pr.outputs.skip != 'true'
        run: |
          echo "Version = ${{ steps.check_version.outputs.skip }}"
          echo "PR = ${{ steps.check_pr.outputs.skip }}"
          echo "Extract"
          #container_id=$(docker create "$image:$latest_version")
          #docker cp "$container_id:/opt/omd/versions/$latest_version.cre/share/check_mk/agents/check-mk-agent_$latest_version-1_all.deb" "$destination_path"

      - name: Create Slackware package
        if: steps.check_version.outputs.skip != 'true' && steps.check_pr.outputs.skip != 'true'
        run: |
          echo "Create Slackware package"
          #docker run --rm -v $(pwd)/:/build vbatts/slackware:latest sh /build/source/compile_docker.sh

      - name: Update plugin file
        if: steps.check_version.outputs.skip != 'true' && steps.check_pr.outputs.skip != 'true'
        run: |
          echo "Update plugin file"
          #md5_hash=$(md5sum packages/check_mk_agent-"$(date +'%Y.%m.%d').$version".tgz | cut -d' ' -f1)
          #sed -i 's/<!ENTITY version   "[^"]*">/<!ENTITY version   "'$(date +'%Y.%m.%d').$version'">/' check_mk_agent$version.plg
          #sed -i 's@<!ENTITY md5       "[^"]*">@<!ENTITY md5       "'"${md5_hash}"'">@' check_mk_agent$version.plg
          #sed -i "/<CHANGES>/{n;s/.*/\n###$(date +'%Y.%m.%d')\n- Bumped checkmk_agent to $latest_version\n&/}" check_mk_agent$version.plg

      # - name: Create Pull Request
      #   if: '!steps.check_pr.outputs.skip'
      #   uses: peter-evans/create-pull-request@v5
      #   with: 
      #     commit-message: Bump check_mk_agent to ${{ env.latest_version }}
      #     committer: GitHub <noreply@github.com>
      #     author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
      #     branch: bump-${{ env.latest_version }}
      #     delete-branch: true
      #     title: 'Check_mk_agent to ${{ env.latest_version }}'
      #     body: |
      #       Bump Checkmk agent to ${{ env.latest_version }}
      #     labels: |
      #       automated pr
      #     assignees: Donimax
      #     reviewers: Donimax
